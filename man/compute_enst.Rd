% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_enst.R
\name{compute_enst}
\alias{compute_enst}
\title{Compute the Norm of the Curl from the given mesh}
\usage{
compute_enst(X, Y, Z, ds, noise = T, normalise = NULL)
}
\arguments{
\item{X, Y, Z}{A 3 x 3 x 3 array with each cell containing the mean velocity of the
particles within each cell over-layed on the halo w.r.t with
the x,y and z axis}

\item{ds}{The side length of the cells within the grid}

\item{noise}{A boolean value determining if numerical noise should be calculated in
determining the curl of the velocity field. It is naturally set to True}

\item{normalise}{An optional value, normalizes the enstrophy and error returned.
The normalize value in units of Gyrs^2}
}
\description{
Calculates the normal curl from the given grid about the center of the grid,
the curl is calculated through numerical approximations of partial derivatives
across the grid cells.

Using the cross configuration, ie) ignoring the corner boxes of the array,
the central 3D cross (boxes with face to face contact with the central box),
can be used to calculate the curl around the central box within the 3x3x3 array of velocities.
Therefore 9 partial derivatives will be numerically approximated from the 3x3x3 array.

The curl formula is: curl of f(x,y,z) = ( (dz/dy - dy/dz)i , (dx/dz - dz/dx)j , (dy/dx - dx/dy)k )

Calculated using simulaiton length units \link{Mpc /h} and velocity units of \link{(simulaiton length units)/Gyrs},
as the interpolated velocity positions are returned in Gyrs, therefore enstrophy is given in Gyrs^-2.
This allows for less conversion of units, a more natural normalisation of enstrophy & conforms with convention
of natural units as galaxy clusters use Gyrs as a natural unit of time.
}
