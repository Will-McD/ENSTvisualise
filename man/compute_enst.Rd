% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_enst.R
\name{compute_enst}
\alias{compute_enst}
\title{Compute the Norm of the Curl from the given mesh}
\usage{
compute_enst(X, Y, Z, ds, noise = T, normalise = NULL)
}
\arguments{
\item{X, Y, Z}{A 3 x 3 x 3 array with each cell containing the mean velocity of the
particles within each cell over-layed on the halo w.r.t with
the x,y and z axis}

\item{ds}{The side length of the cells within the grid}

\item{noise}{A boolean value determining if numerical noise should be calculated in
determining the curl of the velocity field. It is naturally set to True}

\item{normalise}{An optional value, normalizes the enstrophy and error returned.
The normalize value in units of Gyrs^2}
}
\description{
Calculates the normal curl from the given 3x3x3 grid about the
center of the grid,the curl is calculated through numerical approximations
of partial derivatives across the grid boxes adjacent to the central box.

Using the cross configuration, the central cross (the boxes in face to face
contact with the central box \link{ignoring the corner boxes of the 3D array}),
can be used to calculate the curl around the central box within the 3x3x3
array of velocities.
Therefore 9 partial derivatives will be numerically approximated from the
3x3x3 array, as shown in the equation below:

Curl of f(x,y,z) = ( (dz/dy - dy/dz)i , (dx/dz - dz/dx)j , (dy/dx - dx/dy)k )

The curl is calculated using simulaiton length units \link{Mpc /h} and velocity
units \link{Mpc/h /Gyrs} from SURFS, therefore, enstrophy is given in Gyrs^-2.

If normalised the value returned is unitless, given the normalization value
is in Gyrs^2
}
